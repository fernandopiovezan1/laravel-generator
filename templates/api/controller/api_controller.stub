<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_API_REQUEST$\Create$MODEL_NAME$APIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;

/**
 * Class $MODEL_NAME$Controller
 * @package $NAMESPACE_API_CONTROLLER$
 * @group $MODEL_NAME_PLURAL$
 * Endpoint de gerenciamento de $MODEL_NAME_PLURAL_HUMAN$
 */
class $MODEL_NAME$APIController extends AppBaseController
{
    /** @var  $MODEL_NAME$Repository */
    private $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    $DOC_INDEX$
    public function index(Request $request)
    {
        if ($request->exists('search')) {
            $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository
                ->advancedSearch($request)
                ->orderByRaw('deleted_at asc,' . ($request->get('order') ?? 'id') .
                             ' ' . ($request->get('direction') ?? 'DESC'))
                ->paginate($request->get('limit'));
        } else {
            $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository
                ->findAllFieldsAnd($request)
                ->orderByRaw('deleted_at asc,' . ($request->get('order') ?? 'id') .
                             ' ' . ($request->get('direction') ?? 'DESC'))
                ->paginate($request->get('limit'));
        }

        return $this->sendResponse($$MODEL_NAME_PLURAL_CAMEL$->toArray(), '$MODEL_NAME_PLURAL_HUMAN$ recuperados com sucesso');
    }

    $DOC_STORE$
    public function store(Create$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);
        
        return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), '$MODEL_NAME_HUMAN$ salvo com sucesso');
    }

    $DOC_SHOW$
    public function show(int $id)
    {
        if (!is_numeric($id)) {
            return $this->sendError('Parâmetro incorreto');
        }
        
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ não encontrado(a)');
        }

        return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), '$MODEL_NAME_HUMAN$ recuperado com sucesso');
    }

    $DOC_UPDATE$
    public function update(int $id, Update$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ não encontrado');
        }
        
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($input, $id);

        return $this->sendResponse($$MODEL_NAME_CAMEL$->toArray(), '$MODEL_NAME_HUMAN$ atualizado(a) com sucesso');
    }

    $DOC_DESTROY$
    public function destroy(int $id)
    {
        return $this->response($this->$MODEL_NAME_CAMEL$Repository->deleteOrUndelete($id));
    }
}
